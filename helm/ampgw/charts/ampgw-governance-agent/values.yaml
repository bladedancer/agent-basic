#############################################################
# Global values
# These values can be overridden
#############################################################
global:
  # Override this if a different name is required for the Governance Agent
  agentName: ampgw-governance-agent
  agentReplicas: 3

#############################################################
# ampgw-governance-agent values
#############################################################
image:
  # Overrides the image tag whose default is the chart appVersion.
  repository: axway.jfrog.io/ampc-docker-release-ptx/ampgw-governance-agent
  tag: 0.7.0
  pullPolicy: Always

imagePullSecrets: []

command:
  - /ampgw-governance-agent

env:
  CENTRAL_AUTH_PRIVATEKEY: /keys/serviceAccPrivateKey
  CENTRAL_AUTH_PUBLICKEY: /keys/serviceAccPublicKey
  CENTRAL_ENVIRONMENT: "{{ .Values.global.environment }}"

envField:
  CENTRAL_AGENTNAME: 
      fieldPath: metadata.name

replicaCount: 2

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}

# The service account key used by agent to authenticate to Central
secretMounts:
  auth:
    secretName: ampgw-secret
    mountPath: /keys
    defaultMode: 420  # 420 in base10 == 0644 in octal
envSecret:
  CENTRAL_AUTH_CLIENTID:
    name: ampgw-secret
    key: clientId
  CENTRAL_ORGANIZATIONID:
    name: ampgw-secret
    key: orgId

ports:
  agent-grpc:
    containerPort: 18000
    protocol: TCP
  status:
    containerPort: 8989
    protocol: TCP

startupProbe:
  httpGet:
    path: /status/live
    port: status
  failureThreshold: 30
  periodSeconds: 10
livenessProbe:
  httpGet:
    path: /status/live
    port: status
readinessProbe:
  timeoutSeconds: 5
  periodSeconds: 30
  httpGet:
    path: /status
    port: status

service:
  name: ampgw-governance-agent
  enabled: true
  type: ClusterIP
  loadBalancerIP: ""
  annotations: {}
  ports:
    grpc:
      port: 18000
      targetPort: agent-grpc
      protocol: TCP
    status:
      port: 8989
      targetPort: status
      protocol: TCP

podSecurityContext: {}
securityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  # Cannot have readOnlyRootFilesystem:true as need to write usage data
  #readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 2500

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## ServiceMonitor consumed by prometheus-operator
serviceMonitor:
  ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
  enabled: false
  interval: "15s"
  targetLabels: []
  podTargetLabels: []
  ## Namespace in which the service monitor is created
  # namespace: monitoring
  # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

## ref: https://pracucci.com/graceful-shutdown-of-kubernetes-pods.html
terminationGracePeriodSeconds: 30

# These may need tuning
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

lifecycle: {}
priorityClassName: ""
nodeSelector: {}
tolerations: []
affinity: {}
files: {}



