#############################################################
# Global values
# These values can be overridden
#############################################################
global:
  # Override this if a different Environment name is required
  environment: amplify-gateway-env
  # Override this if a different listener port for API traffic is required
  listenerPort: 4443
  # The proxy admin port is not externally accessible by default, override this to
  # true in order to invoke the proxy admin APIs
  exposeProxyAdminPort: false
  # Override this if exposeProxyAdminPort=true and a different port is required for the proxy admin APIs.
  proxyAdminPort: 9901
  # Rate limiting for ADS from agent
  adsMaxTokens: 10
  adsFillRate: 4

#############################################################
# ampgw-proxy values
#############################################################
image:
  repository: envoyproxy/envoy
  tag: v1.20.0
  pullPolicy: Always

command:
  - /usr/local/bin/envoy

argsTemplate: |-
  - -l
  - $(LOGLEVEL)
  - -c
  - /config/envoy.yaml
  - --service-node
  - {{ .Values.global.environment }}

env:
  LOGLEVEL: info

# Ignored if autoscaling is enabled.
replicaCount: 1
strategy: |
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 2
    maxUnavailable: 1

nameOverride: ""
fullnameOverride: ""
podAnnotations: {}
podLabels: {}

imagePullSecrets: []
secretMounts: {}

ports:
  admin:
    containerPort: 9901
    protocol: TCP

# Where the XDS and ALS Service is running
agentServer:
  host: ampgw-governance-agent
  port: 18000

startupProbe:
  httpGet:
    path: /
    port: admin
  failureThreshold: 30
  periodSeconds: 10
livenessProbe:
  httpGet:
    path: /
    port: admin
readinessProbe:
  httpGet:
    path: /ready
    port: admin

service:
  name: ampgw-proxy
  enabled: true
  type: LoadBalancer
  loadBalancerIP: ""
  annotations: {}
  # Add the configurable TLS listener port for API traffic
  portsTemplate:
    https: |-
      port: {{ .Values.global.listenerPort }}
      targetPort: {{ .Values.global.listenerPort }}
      protocol: TCP

podSecurityContext: {}
securityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  securityContext:
  readOnlyRootFilesystem: true
#  runAsNonRoot: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## ServiceMonitor consumed by prometheus-operator
serviceMonitor:
  ## If the operator is installed in your cluster, set to true to create a Service Monitor Entry
  enabled: false
  interval: "15s"
  targetLabels: []
  podTargetLabels: []
  ## Namespace in which the service monitor is created
  # namespace: monitoring
  # Added to the ServiceMonitor object so that prometheus-operator is able to discover it
  ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  additionalLabels: {}

## ref: https://pracucci.com/graceful-shutdown-of-kubernetes-pods.html
terminationGracePeriodSeconds: 30

# These may need tuning
resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

lifecycle: {}
priorityClassName: ""
nodeSelector: {}
tolerations: []
affinity: {}
files: {}

# Use helm values to dynamically generate envoy.yaml
templates:
  envoy.yaml: |-
    node:
      cluster: ampgw
      id: ampgw

    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: {{ .Values.ports.admin.containerPort }}

    dynamic_resources:
      ads_config:
        api_type: GRPC
        transport_api_version: V3
        grpc_services:
        - envoy_grpc:
            cluster_name: agent-cluster
        set_node_on_first_message_only: true
        rate_limit_settings:
          max_tokens: {{ .Values.global.adsMaxTokens }}
          fill_rate: {{ .Values.global.adsFillRate }}
      cds_config:
        resource_api_version: V3
        ads: {}
      lds_config:
        resource_api_version: V3
        ads: {}
        
    static_resources:
      clusters:
      - connect_timeout: 1s
        type: LOGICAL_DNS
        load_assignment:
          cluster_name: agent-cluster
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ .Values.agentServer.host }}
                    port_value: {{ .Values.agentServer.port }}
        http2_protocol_options: {}
        name: agent-cluster